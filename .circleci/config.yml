### =============================================================
### This configuration file is used by CircleCI build server
### https://circleci.com/docs/config-sample
### =============================================================
version: 2.1
orbs:
  python: circleci/python@<< pipeline.parameters.python-orb-version >>
  node: circleci/node@<< pipeline.parameters.node-orb-version >>
  orb-tools: circleci/orb-tools@10.0

parameters:
  python-orb-version:
    type: string
    default: "2.0.3"
  node-orb-version:
    type: string
    default: "5.0.1"
  cache-version:
    type: string
    default: v4  # Change this parameter to clear cache.
  global-docker-image:
    type: string
    default: cimg/python:3.8-node

references:
  version_tag_regex: &version_tag_regex
                       /^v\d+\.\d+\.\d+$/ # version regex vx.x.x (i.e. v1.2.3)

  filter_tag_only: &filter_tag_only
    tags:
      only: *version_tag_regex

  tag_filter: &tag_filter
    filters:
      tags:
        only: *version_tag_regex

  install_poetry: &install_poetry
    - run:
        name: Install Poetry
        command: |
          # in old images we need to remove existing poetry
          rm -rf $HOME/.poetry/bin/poetry
          sudo curl -sSL https://install.python-poetry.org | python3 -
          poetry --version

  install_build_dependencies: &install_build_dependencies
    - python/install-packages:
        pkg-manager: "poetry"
        cache-version: << pipeline.parameters.cache-version >>
        pre-install-steps:
          - run:
              name: Check if pyproject.toml is consistent with poetry.lock
              command: poetry lock --check

jobs:
  run-unit-tests:
      parameters:
        pythonversion:
          type: string
      docker:
        - image: cimg/python:<< parameters.pythonversion >>-node
      steps:
        - checkout
        - <<: *install_poetry
        - <<: *install_build_dependencies
        - run:
            name: Pytest
            command: poetry run pytest -p no:warnings -v
        - run:
            name: Coveralls upload
            command: |
              if [ -n "$COVERALLS_REPO_TOKEN" ]; then
                pip install coveralls
                coveralls
              else
                echo "Skipping coveralls"
              fi
        # todo: artifacts

  precommit-checks:
      docker:
        - image: << pipeline.parameters.global-docker-image >>
      steps:
        - checkout
        - attach_workspace:
            at: ~/project
        - run:
            name: Pre-commit
            command: |
              pip install pre-commit
              pre-commit --version
              pre-commit run -a
              deactivate

  build:
      docker:
        - image: << pipeline.parameters.global-docker-image >>
      steps:
          - checkout
          - run:
              name: Build Distrubution
              command: poetry build
          - persist_to_workspace:
              root: ~/project
              paths:
                - dist
          - store_artifacts:
              path: dist

  deploy:
      docker:
        - image: << pipeline.parameters.global-docker-image >>
      steps:
        - checkout
        - run:
            name: Deploy
            command: poetry publish -u __token__ -p ${PYPI_TOKEN}


workflows:
  version: 2.1
  build_and_release:
    jobs:
    - run-unit-tests:
        <<: *tag_filter
        matrix:
          parameters:
            pythonversion: ["3.7", "3.8"]
        name: run-unit-tests-<< matrix.pythonversion >>
    - precommit-checks:
        <<: *tag_filter
    - build:
        <<: *tag_filter
    - deploy:
        <<: *tag_filter
        requires:
          - run-unit-tests